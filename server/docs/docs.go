// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-05-05 16:42:19.172986 +0200 CEST m=+0.028337940

package docs

import (
	"bytes"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "The p5jspingpong API",
        "title": "PingPong API",
        "contact": {},
        "license": {},
        "version": "0.1"
    },
    "host": "localhost:8000",
    "basePath": "/",
    "paths": {
        "/match": {
            "post": {
                "description": "Receives the match settings and starts it. Includes the serve (first sketch)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Start a new pingpong match",
                "parameters": [
                    {
                        "description": "Starting settings for the match",
                        "name": "match_settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/server.NewMatchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/server.MatchResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/server.MatchResponse"
                        }
                    },
                    "425": {
                        "description": "Too Early",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/server.MatchResponse"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/server.MatchResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "server.MatchResponse": {
            "type": "object",
            "properties": {
                "match_id": {
                    "type": "integer"
                },
                "players": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sketches_length": {
                    "type": "integer"
                },
                "started_on": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "server.NewMatchRequest": {
            "type": "object",
            "properties": {
                "max_players": {
                    "type": "integer"
                },
                "requires_approval": {
                    "type": "boolean"
                },
                "sketch": {
                    "type": "string"
                },
                "theme": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo swaggerInfo

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
